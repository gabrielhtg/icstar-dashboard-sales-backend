package gabrielhtg.icstardashboardsalesbackend.service;

import gabrielhtg.icstardashboardsalesbackend.entity.User;
import gabrielhtg.icstardashboardsalesbackend.model.LoginRequestModel;
import gabrielhtg.icstardashboardsalesbackend.model.RegisterUserRequestModel;
import gabrielhtg.icstardashboardsalesbackend.repository.UserRepository;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
public class UserServiceTest {
    @Autowired
    UserRepository userRepository;

    @Autowired
    UserService userService;

    @Autowired
    AuthService authService;

    @Test
    void testRegisterUserBerhasil() {
        RegisterUserRequestModel requestModel = new RegisterUserRequestModel();
        requestModel.setEmail("gabrielhutagalung970@gmail.com");
        requestModel.setPassword("test");
        requestModel.setFirstName("Gabriel");
        requestModel.setLastName("Hutagalung");
        requestModel.setProfilePicture(null);
        requestModel.setAdmin(true);

        Assertions.assertTrue(userService.registerUser(requestModel));

        User user = userRepository.findById(requestModel.getEmail()).orElse(null);

        Assertions.assertNotNull(user);
        Assertions.assertEquals(requestModel.getEmail(), user.getEmail());
        Assertions.assertEquals(requestModel.getFirstName(), user.getFirstName());
        Assertions.assertEquals(requestModel.getLastName(), user.getLastName());
        Assertions.assertEquals(requestModel.getAdmin(), user.getAdmin());
        Assertions.assertEquals(requestModel.getProfilePicture(), user.getProfilePicture());
        Assertions.assertTrue(userService.cekPassword(user, requestModel.getPassword()));
        Assertions.assertNull(user.getSessionToken());
        Assertions.assertNull(user.getSessionTokenActiveUntil());

        // remove user
        userRepository.delete(user);

        // cek apakah user sudah berhasil diremove atau tidak
        Assertions.assertNull(userRepository.findById(requestModel.getEmail()).orElse(null));
    }

    @Test
    void testRegisterUserGagalAlreadyExist () {
        RegisterUserRequestModel requestModel = new RegisterUserRequestModel();
        requestModel.setEmail("gabrielhutagalung970@gmail.com");
        requestModel.setPassword("test");
        requestModel.setFirstName("Gabriel");
        requestModel.setLastName("Hutagalung");
        requestModel.setProfilePicture(null);
        requestModel.setAdmin(true);

        // cek apakah user berhasil register
        Assertions.assertTrue(userService.registerUser(requestModel));

        // mencoba untuk register user ulang
        Assertions.assertFalse(userService.registerUser(requestModel));

        // remove user
        User user = userRepository.findById(requestModel.getEmail()).orElse(null);

        Assertions.assertNotNull(user);
        userRepository.delete(user);

        // cek apakah user sudah berhasil diremove atau tidak
        Assertions.assertNull(userRepository.findById(requestModel.getEmail()).orElse(null));
    }

    @Test
    void testRemoveUserBerhasil() {
        RegisterUserRequestModel requestModel = new RegisterUserRequestModel();
        requestModel.setEmail("gabrielhutagalung970@gmail.com");
        requestModel.setPassword("testpw");
        requestModel.setFirstName("Gabriel");
        requestModel.setLastName("Hutagalung");
        requestModel.setProfilePicture(null);
        requestModel.setAdmin(true);

        // cek apakah user berhasil didaftarkan atau tidak
        Assertions.assertTrue(userService.registerUser(requestModel));

        // mencoba untuk remove user
        Assertions.assertTrue(userService.removeUser(requestModel.getEmail()));
    }

    @Test
    void testRemoveUserGagal () {
        String emailUserTest = "gas@example.com";
        RegisterUserRequestModel requestModel = new RegisterUserRequestModel();
        requestModel.setEmail(emailUserTest);
        requestModel.setPassword("testpw");
        requestModel.setFirstName("User");
        requestModel.setLastName("Test");
        requestModel.setAdmin(true);

        // mencoba untuk menghapus user yang tidak ada
        Assertions.assertFalse(userService.removeUser(requestModel.getEmail()));
    }

    @Test
    void getUserSessionTokenSuccess() {
        LoginRequestModel requestModel = new LoginRequestModel();
        requestModel.setEmail("usertest@example.com");
        requestModel.setPassword("passwordtest");

        authService.login(requestModel);

        String temp = userService.getUserSessionToken(requestModel.getEmail());

        Assertions.assertNotNull(temp);
    }

    @Test
    void getUserSessionTokenFailedUserNotFound() {
        String email = "usertestsalah@example.com";

        String temp = userService.getUserSessionToken(email);

        Assertions.assertNull(temp);
    }

//    @Test
//    void getUserSessionTokenFailedUserNotLogin() {
//         = "usertestsalah@example.com";
//
//        authService.logout(email);
//
//        String temp = userService.getUserSessionToken(email);
//
//        Assertions.assertNull(temp);
//    }
}
